{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-28T20:25:46.092Z",
    "end": "2025-08-28T20:25:47.277Z",
    "duration": 1185,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fc675aed-6712-49b0-98aa-a45450dce29b",
      "title": "",
      "fullFile": "cypress\\e2e\\booking-api.cy.js",
      "file": "cypress\\e2e\\booking-api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "897c9d40-a6fd-482c-8847-e017597c3041",
          "title": "Cenários de teste de API para Restful Booker",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cenário 1: Deve criar uma nova reserva (booking) com sucesso",
              "fullTitle": "Cenários de teste de API para Restful Booker Cenário 1: Deve criar uma nova reserva (booking) com sucesso",
              "timedOut": null,
              "duration": 676,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  firstname: 'Jonathan',\n  lastname: 'Silva',\n  totalprice: 250,\n  depositpaid: true,\n  bookingdates: {\n    checkin: '2025-09-01',\n    checkout: '2025-09-05'\n  },\n  additionalneeds: 'Café da manhã'\n};\ncy.createBooking(payload).then(response => {\n  expect(response.status, 'Status deve ser 200 ao criar booking').to.eq(200);\n  expect(response.body, 'Response deve conter bookingid').to.have.property('bookingid');\n  expect(response.body.booking.firstname, 'Firstname deve ser igual ao enviado').to.eq(payload.firstname);\n  expect(response.body.booking.totalprice, 'Totalprice deve ser igual ao enviado').to.eq(payload.totalprice);\n  bookingId = response.body.bookingid;\n  bookingFirstname = response.body.booking.firstname;\n  cy.log(`Booking ID criado: ${bookingId}`);\n  cy.log(`Firstname para busca: ${bookingFirstname}`);\n});",
              "err": {},
              "uuid": "84e3eac4-7605-4a30-9dad-719bd0dc683b",
              "parentUUID": "897c9d40-a6fd-482c-8847-e017597c3041",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cenário 2: Deve criar e buscar a reserva pelo firstname",
              "fullTitle": "Cenários de teste de API para Restful Booker Cenário 2: Deve criar e buscar a reserva pelo firstname",
              "timedOut": null,
              "duration": 234,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  firstname: 'Jonathan',\n  lastname: 'Tester',\n  totalprice: 250,\n  depositpaid: true,\n  bookingdates: {\n    checkin: '2025-09-01',\n    checkout: '2025-09-05'\n  },\n  additionalneeds: 'Café da manhã'\n};\n// Cria o booking antes de buscar\ncy.createBooking(payload).then(response => {\n  expect(response.status, 'Status deve ser 200 ao criar booking').to.eq(200);\n  const bookingId = response.body.bookingid;\n  const bookingFirstname = response.body.booking.firstname;\n  cy.getBookingByFirstname(bookingFirstname).then(response => {\n    expect(response.status, 'Status deve ser 200 ao buscar booking').to.eq(200);\n    expect(response.body, 'Body deve ser um array não vazio').to.be.an('array').and.not.be.empty;\n    const ids = response.body.map(booking => booking.bookingid);\n    expect(ids, 'Booking ID deve estar na lista de resultados').to.include(bookingId);\n  });\n});",
              "err": {},
              "uuid": "fb7226d2-5ff7-4422-816f-900bebe76313",
              "parentUUID": "897c9d40-a6fd-482c-8847-e017597c3041",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cenário 3: Deve retornar erro ao tentar criar reserva com payload inválido",
              "fullTitle": "Cenários de teste de API para Restful Booker Cenário 3: Deve retornar erro ao tentar criar reserva com payload inválido",
              "timedOut": null,
              "duration": 117,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidPayload = {\n  totalprice: 150\n};\ncy.createInvalidBooking(invalidPayload).then(response => {\n  expect(response.status, 'Status deve ser 500 para payload inválido').to.eq(500);\n});",
              "err": {},
              "uuid": "62cb9b33-e2e5-45da-9a41-36e2f833afbb",
              "parentUUID": "897c9d40-a6fd-482c-8847-e017597c3041",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cenário 4: Deve retornar uma lista vazia ao buscar por um firstname inexistente",
              "fullTitle": "Cenários de teste de API para Restful Booker Cenário 4: Deve retornar uma lista vazia ao buscar por um firstname inexistente",
              "timedOut": null,
              "duration": 119,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentName = `Inexistente${Date.now()}`;\ncy.getBookingByFirstname(nonExistentName).then(response => {\n  expect(response.status, 'Status deve ser 200 ao buscar por nome inexistente').to.eq(200);\n  expect(response.body, 'Body deve ser um array vazio').to.be.an('array').and.to.be.empty;\n});",
              "err": {},
              "uuid": "019ade84-164c-4351-a3f8-da313a7813a4",
              "parentUUID": "897c9d40-a6fd-482c-8847-e017597c3041",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "84e3eac4-7605-4a30-9dad-719bd0dc683b",
            "fb7226d2-5ff7-4422-816f-900bebe76313",
            "62cb9b33-e2e5-45da-9a41-36e2f833afbb",
            "019ade84-164c-4351-a3f8-da313a7813a4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1146,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}